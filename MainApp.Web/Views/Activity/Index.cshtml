@using MainApp.BLL.Enums
@model MainApp.BLL.Models.ActivityStatisticsView

@{
    ViewData["Title"] = "Index";
    var activityNames = Model.ActivitySums.Select(x=>x.Key);
    var activityValues = Model.ActivitySums.Select(x=>x.Value);
}

<head>
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

        // Load the Visualization API and the corechart package.
        google.charts.load('current', { 'packages': ['corechart'] });

        // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(drawChart);

        // Callback that creates and populates a data table,
        // instantiates the pie chart, passes in the data and
        // draws it.
        function drawChart() {
            // Create the data table.
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Topping');
            data.addColumn('number', 'Slices');

            var activityNames = @Html.Raw(Json.Serialize(@activityNames));
            var labels = [];
            var activityValues = @Html.Raw(Json.Serialize(@activityValues));
            var dataValues = [];
            for (var i = 0; i < activityNames.length; i++) {
                var objName = activityNames[i];
                var objValue = activityValues[i];
                data.addRows([
                    [objName, objValue]
            ]);
            };
            // Set chart options
            var options = {
                'title': 'Activity',
                'width': 400,
                'height': 300
            };
            // Instantiate and draw our chart, passing in some options.
            var chart = new google.visualization.PieChart(document.getElementById('chart_div'));
            chart.draw(data, options);
        }
    </script>
</head>


<body>
    <!--Div that will hold the pie chart-->
    <div id="chart_div"></div>
</body>


<h1>Activity statistics</h1>

    <div class="container " style="position: relative; width: 50%">
        <h3 align="center">Current activities</h3>
        <canvas id="myChart"></canvas>
    </div>

<script>

    var models = @Html.Raw(Json.Serialize(@activityNames));
    var labels = [];
    for (var i = 0; i < models.length; i++) {
        var obj = models[i];
        labels.push(obj);
    };

    var models = @Html.Raw(Json.Serialize(@activityValues));
    var dataValues = [];
    for (var i = 0; i < models.length; i++) {
        var obj = models[i];
        dataValues.push(obj);
    };

 const ctx = document.getElementById('myChart').getContext('2d');
 const myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: labels,
        datasets: [{
            label: '# of Activity',
            data: dataValues,
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
});
</script>
